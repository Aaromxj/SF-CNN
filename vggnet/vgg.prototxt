name: "VGG16"
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    #mean_file: "examples/NWPU-RESISC45/mean.binaryproto"
    #mean_file: "examples/AID/largesize/mean.binaryproto"
    mean_file: "examples/UC/mean.binaryproto"
  }
  data_param {
    #source: "examples/NWPU-RESISC45/img_train_lmdb"
    #source: "examples/AID/largesize/img_train_lmdb"
    source: "examples/UC/img_train_lmdb"
    batch_size: 50
    backend: LMDB
  }
}

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    #mean_file: "examples/NWPU-RESISC45/mean.binaryproto"
    #mean_file: "examples/AID/largesize/mean.binaryproto"
    mean_file: "examples/UC/mean.binaryproto"
  }
  data_param {
    #source: "examples/NWPU-RESISC45/img_test_lmdb"
    #source: "examples/AID/largesize/img_test_lmdb"
    source: "examples/UC/img_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}

layer {
  bottom: "data"
  top: "conv1_1"
  name: "conv1_1"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_1"
  top: "conv1_1"
  name: "relu1_1"
  type: "ReLU"
}
layer {
  bottom: "conv1_1"
  top: "conv1_2"
  name: "conv1_2"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv1_2"
  top: "conv1_2"
  name: "relu1_2"
  type: "ReLU"
}
layer {
  bottom: "conv1_2"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2_1"
  name: "conv2_1"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_1"
  top: "conv2_1"
  name: "relu2_1"
  type: "ReLU"
}
layer {
  bottom: "conv2_1"
  top: "conv2_2"
  name: "conv2_2"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv2_2"
  top: "conv2_2"
  name: "relu2_2"
  type: "ReLU"
}
layer {
  bottom: "conv2_2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3_1"
  name: "conv3_1"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_1"
  top: "conv3_1"
  name: "relu3_1"
  type: "ReLU"
}
layer {
  bottom: "conv3_1"
  top: "conv3_2"
  name: "conv3_2"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_2"
  top: "conv3_2"
  name: "relu3_2"
  type: "ReLU"
}
layer {
  bottom: "conv3_2"
  top: "conv3_3"
  name: "conv3_3"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv3_3"
  top: "conv3_3"
  name: "relu3_3"
  type: "ReLU"
}
layer {
  bottom: "conv3_3"
  top: "pool3"
  name: "pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool3"
  top: "conv4_1"
  name: "conv4_1"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_1"
  top: "conv4_1"
  name: "relu4_1"
  type: "ReLU"
}
layer {
  bottom: "conv4_1"
  top: "conv4_2"
  name: "conv4_2"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_2"
  top: "conv4_2"
  name: "relu4_2"
  type: "ReLU"
}
layer {
  bottom: "conv4_2"
  top: "conv4_3"
  name: "conv4_3"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv4_3"
  top: "conv4_3"
  name: "relu4_3"
  type: "ReLU"
}
layer {
  bottom: "conv4_3"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool4"
  top: "conv5_1"
  name: "conv5_1"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_1"
  top: "conv5_1"
  name: "relu5_1"
  type: "ReLU"
}
layer {
  bottom: "conv5_1"
  top: "conv5_2"
  name: "conv5_2"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_2"
  top: "conv5_2"
  name: "relu5_2"
  type: "ReLU"
}
layer {
  bottom: "conv5_2"
  top: "conv5_3"
  name: "conv5_3"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
  }
}
layer {
  bottom: "conv5_3"
  top: "conv5_3"
  name: "relu5_3"
  type: "ReLU"
}

layer {
  bottom: "conv5_3"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
#layer {
#  bottom: "pool5"
#  top: "fc6"
#  name: "fc6"
#  type: "InnerProduct"
#  param {
#    lr_mult: 0.001
#  }
#  param {
#    lr_mult: 0.001
#  }
#  inner_product_param {
#    num_output: 4096
#  }
#}

layer {
  bottom: "pool5"
  top: "fc6"
  name: "conv6-fc6"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 4096
    pad: 0
    kernel_size: 7
  }
}

layer {
  bottom: "fc6"
  top: "fc6"
  name: "relu6"
  type: "ReLU"
}

#layer {
#  bottom: "fc6"
#  top: "fc7"
#  name: "fc7"
#  type: "InnerProduct"
#  param {
#    lr_mult: 0.001
#  }
#  param {
#    lr_mult: 0.001
#  }
#  inner_product_param {
#    num_output: 4096
#  }
#}

layer {
  bottom: "fc6"
  top: "fc7"
  name: "conv7-fc7"
  type: "Convolution"
  param {
    lr_mult: 0.001
  }
  param {
    lr_mult: 0.001
  }
  convolution_param {
    num_output: 4096
    pad: 0
    kernel_size: 1
  }
}

layer {
  bottom: "fc7"
  top: "fc7"
  name: "relu7"
  type: "ReLU"
}

layer {
  name: "GAP"
  type: "Pooling"
  bottom: "fc7"
  top: "gap"
  pooling_param {
    pool: MAX
    global_pooling: true
  }
}

layer {
  bottom: "gap"
  top: "fc"
  name: "fc"
  type: "InnerProduct"
  param {
    lr_mult: 0.01
  }
  param {
    lr_mult: 0.01
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "fc"
  top: "fc"
  name: "relu"
  type: "ReLU"
}
layer {
  bottom: "fc"
  top: "fc"
  name: "drop"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
#  name: "fc8b"
  name: "Classifier"
  type: "ClassDistance"
  bottom: "fc"
  bottom: "label"
  top: "fc8"
  param {
    lr_mult: 0.01
  }
  param { 
    lr_mult: 0.01
  }
  class_distance_param {
    #num_output: 45
    #num_output: 30
    num_output: 21
    weight_filler { 
      type: "gaussian"
      std: 0.0001 
      #value: 1.0 
    }
    update_sigma: false
    isotropic: true
    bias_filler { 
      type: "constant" 
      value: 1.0
    }
    margin_mul {
      policy: STEPUP
      value: 0.00001
      step: 19  #step*batchsize=epoch
      gamma: 2
      max: 0.01
    }
    metric: L2
    center_coef: 0.0001
  }
}
layer {
  name: "accuracy_at_1"
  type: "Accuracy"
  bottom: "fc8"
  bottom: "label"
  top: "accuracy_at_1"
  accuracy_param {
    top_k: 1
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label"
  top: "loss"
}

#layer {
#  name: "Prob"
#  type: "Softmax"
#  bottom: "fc8"
#  top: "Prob"
#}
